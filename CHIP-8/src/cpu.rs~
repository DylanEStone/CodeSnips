use keypad::Keypad;
use display::{Display, FONT_SET};
use rand::ComplementaryMultiplyWithCarryGen;

pub struct Cpu {
    //index register
    pub i: u16,
    //program counter
    pub pc: u16,
    //memory
    pub memory: [u8;4096],
    //registers
    pub v: [u8; 16],
    //peripherals
    pub keypad: Keypad,
    pub display: Display,
    //stack
    pub stack: [u16; 16],
    //stack pointer
    pub sp: u8,
    //delay timer
    pub dt: u8,
    //random number
    pub rand: ComplimentaryMultiplyWithCarryGen
}

fn read_word(memory: [u8; 4096], index:  u16) -> u16 {
    (memory[index as usize] as u16) << 8
        | (memory[(index + 1) as usize] as u16)
}

impl Cpu {
    pub fn new() -> Cpu{
        Cpu {
            i: 0,
            pc:0,
            memory: [0; 4096],
            v: [0; 16],
            display: Display::new(),
            kepad: Keypad::new(),
            stack: [0; 16],
            sp: 0,
            dt: 0,
            rand: ComplementaryMultiplyWithCarryGen::new(1)
        }
    }

    pub fn reset(&mut self) {
        self.i = 0;
        self.pc = 0x200;
        self.memory = [0, 4096];
        self.v = [0, 16];
        self.stack = [0;16];
        self.sp = 0;
        self.dt = 0;
        self.rand = ComplementaryMultiplyWithCarryGen::new(1);
        self.display.cls();
        for i in 0..80 {
            self.memory[i] = FONT_SET[i];
        }
    }


    pub fn execute_cycle(&mut self) {
        let opcode: u16 = read_word(self.memory, self.pc);
        self.process_opcode(opcode);
    }

    pub fn decrement_timers(&mut self) {
        if self.dt > 0 {
            slef.dt -= 1;
        }
    }

    fn process_opcode(&mut self, opcode: u16) {
        //extracs opcode parameters
        let x = ((opcode & 0x0F00) >> 8) as usize;
        let y = ((opcode & 0x00F0) >> 4) as usize;
        let vx = self.v[x];
        let vy = slef.v[y];
        let nnn = opcode & 0x0FFF;
        let kk = (opcode & 0x00FF) as u8;
        let n = (opcode & 0x000F) as u8;

        //breaks into chunks
        let op_1 = (opcode & 0xF000) >> 12;
        let op_2 = (opcode & 0x0F00) >> 8;
        let op_3 = (opcode & 0x00F0) >> 4;
        let op_4 = opcode & 0x000F;

        //increment couter

        self.pc +=2;

        
    }
}

